#!/usr/bin/env python3
"""
üöÄ –ü–ê–ö–ï–¢–ù–´–ô VANITY –ì–ï–ù–ï–†–ê–¢–û–†
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
"""

import multiprocessing as mp
import os
import time
import argparse
import csv
import signal
import sys
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass, asdict
from concurrent.futures import ProcessPoolExecutor, as_completed
import hashlib
import secrets
from pathlib import Path
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤
from networks.optimized import (
    OptimizedTronNetwork, OptimizedBitcoinNetwork, OptimizedEthereumNetwork,
    OptimizedBSCNetwork, OptimizedPolygonNetwork, OptimizedArbitrumNetwork, OptimizedOptimismNetwork
)

# –ò–º–ø–æ—Ä—Ç –æ–±—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
from core.pattern_matcher import check_address_pattern, estimate_pattern_difficulty, get_currency_alphabet_info

@dataclass
class BatchTask:
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    currency: str
    pattern_type: str  # prefix, suffix
    pattern: str
    count: int
    ignore_case: bool
    priority: int
    status: str = "pending"  # pending, running, completed, failed
    found_addresses: int = 0
    start_time: Optional[float] = None
    estimated_time: Optional[str] = None

@dataclass
class BatchResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    task: BatchTask
    addresses: List[dict]
    total_attempts: int
    total_time: float
    avg_speed: float

class BatchVanityGenerator:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –ø–∞–∫–µ—Ç–Ω—ã–º –ø–æ–∏—Å–∫–æ–º"""
    
    def __init__(self):
        self.networks = {
            'BTC': OptimizedBitcoinNetwork(),
            'LTC': OptimizedBitcoinNetwork(),  # Litecoin –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç—É –∂–µ —Å—Ö–µ–º—É
            'DOGE': OptimizedBitcoinNetwork(), # Dogecoin —Ç–æ–∂–µ
            'ETH': OptimizedEthereumNetwork(),
            'TRX': OptimizedTronNetwork(),
            'BSC': OptimizedBSCNetwork(),
            'MATIC': OptimizedPolygonNetwork(),
            'ARB': OptimizedArbitrumNetwork(),
            'OP': OptimizedOptimismNetwork()
        }
        
        self.running = True
        self.current_tasks = []
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)

    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        print(f"\n‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
        self.running = False

    def load_config(self, config_path: str) -> List[BatchTask]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        tasks = []
        
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                reader = csv.reader(f)
                for line_num, row in enumerate(reader, 1):
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    if not row or row[0].strip().startswith('#'):
                        continue
                    
                    if len(row) != 6:
                        print(f"‚ö†Ô∏è  –°—Ç—Ä–æ–∫–∞ {line_num}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                    
                    try:
                        currency, pattern_type, pattern, count, ignore_case, priority = [x.strip() for x in row]
                        
                        task = BatchTask(
                            currency=currency.upper(),
                            pattern_type=pattern_type.lower(),
                            pattern=pattern,
                            count=int(count),
                            ignore_case=ignore_case.lower() == 'true',
                            priority=int(priority)
                        )
                        
                        # –í–∞–ª–∏–¥–∞—Ü–∏—è
                        if task.currency not in self.networks:
                            print(f"‚ö†Ô∏è  –°—Ç—Ä–æ–∫–∞ {line_num}: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–∞–ª—é—Ç–∞ {task.currency}")
                            continue
                            
                        if task.pattern_type not in ['prefix', 'suffix']:
                            print(f"‚ö†Ô∏è  –°—Ç—Ä–æ–∫–∞ {line_num}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–∞—Ç—Ç–µ—Ä–Ω–∞ {task.pattern_type}")
                            continue
                            
                        if task.priority < 1 or task.priority > 5:
                            print(f"‚ö†Ô∏è  –°—Ç—Ä–æ–∫–∞ {line_num}: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1-5")
                            continue
                        
                        tasks.append(task)
                        
                    except (ValueError, IndexError) as e:
                        print(f"‚ö†Ô∏è  –°—Ç—Ä–æ–∫–∞ {line_num}: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ - {e}")
                        continue
                        
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return []
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return []
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (1 = –≤—ã—Å—à–∏–π)
        tasks.sort(key=lambda x: x.priority)
        
        return tasks

    def estimate_task_difficulty(self, task: BatchTask) -> Tuple[str, str, float]:
        """–û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É—è –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é"""
        level, probability, time_seconds = estimate_pattern_difficulty(
            task.pattern, task.pattern_type, task.currency
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if time_seconds < 60:
            time_str = f"~{time_seconds:.1f} —Å–µ–∫"
        elif time_seconds < 3600:
            time_str = f"~{time_seconds/60:.1f} –º–∏–Ω"
        elif time_seconds < 86400:
            time_str = f"~{time_seconds/3600:.1f} —á"
        else:
            time_str = f"~{time_seconds/86400:.1f} –¥–Ω"
            
        return level, time_str, time_seconds

    def execute_single_task(self, task: BatchTask, workers: int = None) -> BatchResult:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏"""
        if not workers:
            workers = min(mp.cpu_count(), 20)  # –ú–∞–∫—Å–∏–º—É–º 20 –≤–æ—Ä–∫–µ—Ä–æ–≤
        
        print(f"\nüéØ –í–´–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–î–ê–ß–ò")
        print(f"============================================================")
        print(f"üí∞ –í–∞–ª—é—Ç–∞: {task.currency}")
        print(f"üîç –ü–æ–∏—Å–∫: {task.pattern_type} '{task.pattern}'")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {task.count if task.count > 0 else '‚àû'}")
        print(f"üî§ –†–µ–≥–∏—Å—Ç—Ä: {'–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è' if task.ignore_case else '—É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è'}")
        print(f"üë• –í–æ—Ä–∫–µ—Ä–æ–≤: {workers}")
        
        # –û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        level, time_str, time_seconds = self.estimate_task_difficulty(task)
        print(f"üìà –°–ª–æ–∂–Ω–æ—Å—Ç—å: {level}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {time_str}")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –¥–æ–ª–≥–∏—Ö –∑–∞–¥–∞—á
        if time_seconds > 3600:  # –ë–æ–ª–µ–µ 1 —á–∞—Å–∞
            print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–æ–ª–≥–∞—è –∑–∞–¥–∞—á–∞!")
            response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").strip().lower()
            if response not in ['y', 'yes', '–¥–∞', '–¥']:
                print("‚ùå –ó–∞–¥–∞—á–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
                task.status = "skipped"
                return BatchResult(task, [], 0, 0, 0)
        
        task.status = "running"
        task.start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏
        network = self.networks[task.currency]
        all_found_addresses = []
        total_attempts = 0
        start_time = time.time()
        batch_counter = 0
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –µ—Å–ª–∏ count –º–∞–ª–µ–Ω—å–∫–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥
        use_memory_optimization = task.count == 0 or task.count > 10
        
        if not use_memory_optimization:
            print(f"‚úÖ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞ (count={task.count} <= 10)...")
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ –±–µ–∑ batch-—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö count
            try:
                with ProcessPoolExecutor(max_workers=workers) as executor:
                    future = executor.submit(
                        self._worker_process,
                        network, task.pattern, task.pattern_type, 
                        task.ignore_case, task.count, 0
                    )
                    
                    worker_results, worker_attempts = future.result()
                    all_found_addresses = worker_results
                    total_attempts = worker_attempts
                    
            except KeyboardInterrupt:
                print(f"\n‚ö†Ô∏è  –ü–æ–∏—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        else:
            print(f"‚úÖ –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Å batch-—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º (count={task.count})...")
            # –ü–æ–ª–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö count
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            csv_dir = Path("CSV")
            csv_dir.mkdir(exist_ok=True)
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            temp_filename = f"temp_{task.currency}_{task.pattern_type}_{task.pattern}_{timestamp}.csv"
            temp_filepath = csv_dir / temp_filename
            
            try:
                with ProcessPoolExecutor(max_workers=workers) as executor:
                    # –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤ —Å –º–µ–Ω—å—à–∏–º–∏ batch-—Ä–∞–∑–º–µ—Ä–∞–º–∏
                    batch_size = max(10, task.count // workers) if task.count > 0 else 50
                    
                    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    with open(temp_filepath, 'w', newline='', encoding='utf-8') as temp_csvfile:
                        temp_writer = csv.DictWriter(temp_csvfile, 
                                                   fieldnames=['address', 'private_key', 'currency', 'found_time', 'worker_id'])
                        temp_writer.writeheader()
                        
                        futures = {}
                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö futures
                        max_concurrent_futures = min(workers, 10)
                        
                        for worker_id in range(max_concurrent_futures):
                            future = executor.submit(
                                self._worker_process_memory_optimized,
                                network, task.pattern, task.pattern_type, 
                                task.ignore_case, batch_size, worker_id
                            )
                            futures[future] = worker_id
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –º–µ—Ä–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
                        completed_count = 0
                        while futures and self.running:
                            try:
                                # –£–±–∏—Ä–∞–µ–º timeout —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å TimeoutError
                                completed_futures = []
                                for future in list(futures.keys()):
                                    if future.done():
                                        completed_futures.append(future)
                                
                                if not completed_futures:
                                    time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –µ—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                                    continue
                                    
                                for future in completed_futures:
                                    if not self.running:
                                        break
                                        
                                    try:
                                        worker_results, worker_attempts = future.result()
                                        
                                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–∑—É –≤ —Ñ–∞–π–ª
                                        if worker_results:
                                            temp_writer.writerows(worker_results)
                                            temp_csvfile.flush()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –¥–∏—Å–∫
                                            all_found_addresses.extend(worker_results)
                                            batch_counter += 1
                                            
                                            print(f"üíæ Batch {batch_counter}: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(worker_results)} –∞–¥—Ä–µ—Å–æ–≤")
                                        
                                        total_attempts += worker_attempts
                                        completed_count += len(worker_results)
                                        
                                        # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π future
                                        worker_id = futures[future]
                                        del futures[future]
                                        
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ª–∏ —Ü–µ–ª—å
                                        if task.count > 0 and completed_count >= task.count:
                                            print(f"üéØ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞: {completed_count}/{task.count}")
                                            # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
                                            for remaining_future in list(futures.keys()):
                                                remaining_future.cancel()
                                            futures.clear()
                                            break
                                            
                                        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
                                        if (task.count == 0 or completed_count < task.count) and len(futures) < max_concurrent_futures:
                                            new_future = executor.submit(
                                                self._worker_process_memory_optimized,
                                                network, task.pattern, task.pattern_type, 
                                                task.ignore_case, batch_size, worker_id
                                            )
                                            futures[new_future] = worker_id
                                            
                                    except Exception as e:
                                        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ {futures.get(future, 'unknown')}: {e}")
                                        if future in futures:
                                            del futures[future]
                                        continue
                            
                            except Exception as e:
                                print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                                break
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–∞–º—è—Ç–∏
                            if len(all_found_addresses) > 1000:  # –õ–∏–º–∏—Ç –≤ –ø–∞–º—è—Ç–∏
                                print(f"üß† –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏: {len(all_found_addresses)} –∞–¥—Ä–µ—Å–æ–≤ –≤ –±—É—Ñ–µ—Ä–µ")
                                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                                all_found_addresses = all_found_addresses[-100:]
            
            except KeyboardInterrupt:
                print(f"\n‚ö†Ô∏è  –ü–æ–∏—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
        # –û–±—â–∏–π –±–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥—Ö–æ–¥–æ–≤
            
        total_time = time.time() - start_time
        avg_speed = total_attempts / total_time if total_time > 0 else 0
        
        task.status = "completed" 
        completed_count = len(all_found_addresses)
        task.found_addresses = completed_count
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–¥—Ö–æ–¥–∞
        if not use_memory_optimization and all_found_addresses:
            # –û–±—ã—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö count
            csv_dir = Path("CSV") 
            csv_dir.mkdir(exist_ok=True)
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            final_filename = f"{task.currency}_{task.pattern_type}_{task.pattern}_{timestamp}.csv"
            final_filepath = csv_dir / final_filename
            
            with open(final_filepath, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(['Currency', 'Pattern_Type', 'Pattern', 'Address', 'Private_Key', 'Attempts', 'Time'])
                for addr in all_found_addresses:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫ dict (–∏–∑ _worker_process) –∏–ª–∏ –∫–∞–∫ OptimizedKey
                    if isinstance(addr, dict):
                        writer.writerow([
                            task.currency, task.pattern_type, task.pattern,
                            addr['address'], addr['private_key'], 
                            addr.get('attempts_when_found', 0),
                            f"{total_time:.2f}s"
                        ])
                    else:
                        writer.writerow([
                            task.currency, task.pattern_type, task.pattern,
                            addr.address, addr.private_key, 
                            addr.attempts_when_found,
                            f"{total_time:.2f}s"
                        ])
            
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {final_filename}")
            
        elif use_memory_optimization:
            # Batch –ø–æ–¥—Ö–æ–¥ - –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π
            if 'temp_filepath' in locals() and temp_filepath.exists() and completed_count > 0:
                final_filename = f"{task.currency}_{task.pattern_type}_{task.pattern}_{timestamp}.csv"
                final_filepath = csv_dir / final_filename
                temp_filepath.rename(final_filepath)
                print(f"üíæ –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {final_filepath}")
            elif 'temp_filepath' in locals() and temp_filepath.exists():
                # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                temp_filepath.unlink()
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ó–ê–î–ê–ß–ò")
        print(f"==================================================")
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ: {completed_count}")
        print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {avg_speed:,.0f} –∞–¥—Ä/—Å")
        print(f"üî¢ –ü–æ–ø—ã—Ç–æ–∫: {total_attempts:,}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {total_time:.1f} —Å")
        memory_mode = "batch-—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ" if use_memory_optimization else "–æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º"
        print(f"üß† –ü–∞–º—è—Ç—å: {memory_mode}")
        
        return BatchResult(task, all_found_addresses[-10:] if len(all_found_addresses) > 10 else all_found_addresses, total_attempts, total_time, avg_speed)

    def _worker_process_memory_optimized(self, network, pattern: str, pattern_type: str, 
                                        ignore_case: bool, batch_size: int, worker_id: int) -> Tuple[List[dict], int]:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç—å—é"""
        found = []
        attempts = 0
        
        # –õ–æ–∫–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è batch –æ–±—Ä–∞–±–æ—Ç–∫–∏
        local_batch_count = 0
        max_batch_size = min(batch_size, 50)  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä batch –¥–ª—è —á–∞—Å—Ç–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
        
        while self.running and len(found) < max_batch_size:
            try:
                key = network.generate()
                attempts += 1
                local_batch_count += 1
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É—è –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
                if check_address_pattern(
                    address=key.address,
                    currency=key.currency,
                    pattern=pattern,
                    pattern_type=pattern_type,
                    ignore_case=ignore_case
                ):
                    found.append({
                        'address': key.address,
                        'private_key': key.private_key,
                        'currency': key.currency,
                        'found_time': int(time.time()),
                        'worker_id': worker_id
                    })
                    
                    print(f"[–ù–ê–ô–î–ï–ù] Worker {worker_id}: {key.address}")
                    
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç (—Ä–µ–∂–µ —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –≤—ã–≤–æ–¥)
                if local_batch_count % 10000 == 0:
                    print(f"Worker {worker_id}: {attempts:,} –ø–æ–ø—ã—Ç–æ–∫, {len(found)} –Ω–∞–π–¥–µ–Ω–æ")
                    
                # –ë–æ–ª–µ–µ –º—è–≥–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —á–∞—â–µ
                if attempts >= 50000:  # –£–º–µ–Ω—å—à–∏–ª–∏ –ª–∏–º–∏—Ç –¥–ª—è –±–æ–ª–µ–µ —á–∞—Å—Ç–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    print(f"Worker {worker_id}: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ batch –ø–æ—Å–ª–µ {attempts} –ø–æ–ø—ã—Ç–æ–∫")
                    break
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ {worker_id}: {e}")
                break
        
        return found, attempts

    def _worker_process(self, network, pattern: str, pattern_type: str, 
                       ignore_case: bool, target_count: int, worker_id: int) -> Tuple[List[dict], int]:
        """–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        found = []
        attempts = 0
        
        while self.running:
            try:
                key = network.generate()
                attempts += 1
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É—è –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
                if check_address_pattern(
                    address=key.address,
                    currency=key.currency,
                    pattern=pattern,
                    pattern_type=pattern_type,
                    ignore_case=ignore_case
                ):
                    found.append({
                        'address': key.address,
                        'private_key': key.private_key,
                        'currency': key.currency,
                        'found_time': int(time.time()),
                        'worker_id': worker_id
                    })
                    
                    print(f"[–ù–ê–ô–î–ï–ù {len(found)}] {key.address}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
                    if target_count > 0 and len(found) >= target_count:
                        break
                        
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç
                if attempts % 10000 == 0:
                    print(f"–í–æ—Ä–∫–µ—Ä {worker_id}: {attempts:,} –ø–æ–ø—ã—Ç–æ–∫")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ {worker_id}: {e}")
                break
        
        return found, attempts

    def _save_results(self, task: BatchTask, addresses: List[dict]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–¥–∞—á–∏"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ CSV
        csv_dir = Path("CSV")
        csv_dir.mkdir(exist_ok=True)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{task.currency}_{task.pattern_type}_{task.pattern}_{timestamp}.csv"
        filepath = csv_dir / filename
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV
        with open(filepath, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=['address', 'private_key', 'currency', 'found_time', 'worker_id'])
            writer.writeheader()
            writer.writerows(addresses)
        
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(addresses)} –∞–¥—Ä–µ—Å–æ–≤ –≤: {filepath}")

    def execute_batch(self, config_path: str, workers: int = None):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        print(f"üöÄ –ü–ê–ö–ï–¢–ù–´–ô VANITY –ì–ï–ù–ï–†–ê–¢–û–†")
        print(f"============================================================")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á
        tasks = self.load_config(config_path)
        if not tasks:
            print("‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            return
        
        print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")
        print(f"üíª –í–æ—Ä–∫–µ—Ä–æ–≤: {workers or mp.cpu_count()}")
        
        # –ü–æ–∫–∞–∑ –ø–ª–∞–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        print(f"\nüìÖ –ü–õ–ê–ù –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
        print(f"============================================================")
        for i, task in enumerate(tasks, 1):
            level, time_str, _ = self.estimate_task_difficulty(task)
            print(f"{i:2}. {task.currency} {task.pattern_type}='{task.pattern}' "
                  f"(–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç={task.priority}, {level}, {time_str})")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
        print(f"\n‚ö†Ô∏è  –ü–∞–∫–µ—Ç–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!")
        response = input("–ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ? (Y/n): ").strip().lower()
        if response in ['n', 'no', '–Ω–µ—Ç', '–Ω']:
            print("‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
        results = []
        total_start = time.time()
        
        for i, task in enumerate(tasks, 1):
            if not self.running:
                break
                
            print(f"\n{'='*60}")
            print(f"üìã –ó–ê–î–ê–ß–ê {i}/{len(tasks)}")
            print(f"{'='*60}")
            
            result = self.execute_single_task(task, workers)
            results.append(result)
            
            # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
            if self.running and i < len(tasks):
                time.sleep(2)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = time.time() - total_start
        total_found = sum(len(r.addresses) for r in results)
        total_attempts = sum(r.total_attempts for r in results)
        
        print(f"\nüéâ –ü–ê–ö–ï–¢–ù–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print(f"============================================================")
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time/60:.1f} –º–∏–Ω")
        print(f"üéØ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {total_found}")
        print(f"üî¢ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {total_attempts:,}")
        print(f"‚ö° –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {total_attempts/total_time:,.0f} –∞–¥—Ä/—Å")
        
        print(f"\nüìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"============================================================")
        for i, result in enumerate(results, 1):
            status_icon = "‚úÖ" if result.task.status == "completed" else "‚ö†Ô∏è"
            print(f"{status_icon} {i:2}. {result.task.currency} {result.task.pattern_type}='{result.task.pattern}': "
                  f"{len(result.addresses)} –Ω–∞–π–¥–µ–Ω–æ –∑–∞ {result.total_time:.1f}—Å")

def main():
    parser = argparse.ArgumentParser(description='üöÄ –ü–∞–∫–µ—Ç–Ω—ã–π Vanity Address Generator')
    parser.add_argument('--config', default='config.csv',
                      help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: config.csv)')
    parser.add_argument('--workers', type=int,
                      help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤—Å–µ —è–¥—Ä–∞)')
    parser.add_argument('--single', action='store_true',
                      help='–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–Ω—É –∑–∞–¥–∞—á—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
    parser.add_argument('--currency', choices=['BTC', 'ETH', 'TRX', 'LTC', 'DOGE', 'BSC', 'MATIC', 'ARB', 'OP'],
                      help='–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (BTC, ETH, TRX, LTC, DOGE, BSC, MATIC, ARB, OP)')
    parser.add_argument('--prefix', help='–ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞')
    parser.add_argument('--suffix', help='–°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞')
    parser.add_argument('--count', type=int, default=0, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤')
    parser.add_argument('--ignore-case', action='store_true', help='–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä')
    
    args = parser.parse_args()
    
    generator = BatchVanityGenerator()
    
    # –†–µ–∂–∏–º –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å max_core_generator.py)
    if args.currency and (args.prefix or args.suffix):
        pattern = args.prefix or args.suffix
        pattern_type = 'prefix' if args.prefix else 'suffix'
        
        task = BatchTask(
            currency=args.currency,
            pattern_type=pattern_type,
            pattern=pattern,
            count=args.count,
            ignore_case=args.ignore_case,
            priority=1
        )
        
        generator.execute_single_task(task, args.workers)
    
    # –†–µ–∂–∏–º –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    else:
        generator.execute_batch(args.config, args.workers)

if __name__ == "__main__":
    main()
